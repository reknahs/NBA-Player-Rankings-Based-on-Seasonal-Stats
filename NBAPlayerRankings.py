{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rk</th>\n",
       "      <th>Player</th>\n",
       "      <th>Pos</th>\n",
       "      <th>Age</th>\n",
       "      <th>Tm</th>\n",
       "      <th>G</th>\n",
       "      <th>GS</th>\n",
       "      <th>MP</th>\n",
       "      <th>FG</th>\n",
       "      <th>FGA</th>\n",
       "      <th>...</th>\n",
       "      <th>FT%</th>\n",
       "      <th>ORB</th>\n",
       "      <th>DRB</th>\n",
       "      <th>TRB</th>\n",
       "      <th>AST</th>\n",
       "      <th>STL</th>\n",
       "      <th>BLK</th>\n",
       "      <th>TOV</th>\n",
       "      <th>PF</th>\n",
       "      <th>PTS▼</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Stephen Curry\\curryst01</td>\n",
       "      <td>PG</td>\n",
       "      <td>32</td>\n",
       "      <td>GSW</td>\n",
       "      <td>48</td>\n",
       "      <td>48</td>\n",
       "      <td>1627</td>\n",
       "      <td>10.7</td>\n",
       "      <td>21.9</td>\n",
       "      <td>...</td>\n",
       "      <td>0.927</td>\n",
       "      <td>0.5</td>\n",
       "      <td>5.3</td>\n",
       "      <td>5.9</td>\n",
       "      <td>6.3</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.1</td>\n",
       "      <td>3.4</td>\n",
       "      <td>1.9</td>\n",
       "      <td>32.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Bradley Beal\\bealbr01</td>\n",
       "      <td>SG</td>\n",
       "      <td>27</td>\n",
       "      <td>WAS</td>\n",
       "      <td>45</td>\n",
       "      <td>45</td>\n",
       "      <td>1587</td>\n",
       "      <td>11.1</td>\n",
       "      <td>23.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.897</td>\n",
       "      <td>1.2</td>\n",
       "      <td>3.7</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.9</td>\n",
       "      <td>1.2</td>\n",
       "      <td>0.4</td>\n",
       "      <td>3.4</td>\n",
       "      <td>2.5</td>\n",
       "      <td>31.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Giannis Antetokounmpo\\antetgi01</td>\n",
       "      <td>PF</td>\n",
       "      <td>26</td>\n",
       "      <td>MIL</td>\n",
       "      <td>46</td>\n",
       "      <td>46</td>\n",
       "      <td>1554</td>\n",
       "      <td>11.0</td>\n",
       "      <td>19.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0.684</td>\n",
       "      <td>1.9</td>\n",
       "      <td>10.1</td>\n",
       "      <td>12.0</td>\n",
       "      <td>6.5</td>\n",
       "      <td>1.3</td>\n",
       "      <td>1.4</td>\n",
       "      <td>3.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>30.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Luka Dončić\\doncilu01</td>\n",
       "      <td>PG</td>\n",
       "      <td>21</td>\n",
       "      <td>DAL</td>\n",
       "      <td>49</td>\n",
       "      <td>49</td>\n",
       "      <td>1716</td>\n",
       "      <td>10.4</td>\n",
       "      <td>21.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0.737</td>\n",
       "      <td>0.8</td>\n",
       "      <td>7.3</td>\n",
       "      <td>8.1</td>\n",
       "      <td>8.8</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.6</td>\n",
       "      <td>4.4</td>\n",
       "      <td>2.3</td>\n",
       "      <td>29.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Zion Williamson\\willizi01</td>\n",
       "      <td>PF</td>\n",
       "      <td>20</td>\n",
       "      <td>NOP</td>\n",
       "      <td>50</td>\n",
       "      <td>50</td>\n",
       "      <td>1646</td>\n",
       "      <td>11.2</td>\n",
       "      <td>18.2</td>\n",
       "      <td>...</td>\n",
       "      <td>0.701</td>\n",
       "      <td>2.8</td>\n",
       "      <td>5.0</td>\n",
       "      <td>7.8</td>\n",
       "      <td>4.1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>2.8</td>\n",
       "      <td>2.4</td>\n",
       "      <td>29.3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 29 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Rk                           Player Pos  Age   Tm   G  GS    MP    FG  \\\n",
       "0   1          Stephen Curry\\curryst01  PG   32  GSW  48  48  1627  10.7   \n",
       "1   2            Bradley Beal\\bealbr01  SG   27  WAS  45  45  1587  11.1   \n",
       "2   3  Giannis Antetokounmpo\\antetgi01  PF   26  MIL  46  46  1554  11.0   \n",
       "3   4            Luka Dončić\\doncilu01  PG   21  DAL  49  49  1716  10.4   \n",
       "4   5        Zion Williamson\\willizi01  PF   20  NOP  50  50  1646  11.2   \n",
       "\n",
       "    FGA  ...    FT%  ORB   DRB   TRB  AST  STL  BLK  TOV   PF  PTS▼  \n",
       "0  21.9  ...  0.927  0.5   5.3   5.9  6.3  1.3  0.1  3.4  1.9  32.6  \n",
       "1  23.0  ...  0.897  1.2   3.7   4.9  4.9  1.2  0.4  3.4  2.5  31.6  \n",
       "2  19.5  ...  0.684  1.9  10.1  12.0  6.5  1.3  1.4  3.9  3.0  30.3  \n",
       "3  21.5  ...  0.737  0.8   7.3   8.1  8.8  1.0  0.6  4.4  2.3  29.4  \n",
       "4  18.2  ...  0.701  2.8   5.0   7.8  4.1  1.0  0.8  2.8  2.4  29.3  \n",
       "\n",
       "[5 rows x 29 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "per36 = pd.read_csv(\"per36stats.csv\")\n",
    "per36.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rk</th>\n",
       "      <th>Player</th>\n",
       "      <th>Pos</th>\n",
       "      <th>Age</th>\n",
       "      <th>Tm</th>\n",
       "      <th>G</th>\n",
       "      <th>MP</th>\n",
       "      <th>PER</th>\n",
       "      <th>TS%▼</th>\n",
       "      <th>3PAr</th>\n",
       "      <th>...</th>\n",
       "      <th>Unnamed: 19</th>\n",
       "      <th>OWS</th>\n",
       "      <th>DWS</th>\n",
       "      <th>WS</th>\n",
       "      <th>WS/48</th>\n",
       "      <th>Unnamed: 24</th>\n",
       "      <th>OBPM</th>\n",
       "      <th>DBPM</th>\n",
       "      <th>BPM</th>\n",
       "      <th>VORP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Joe Ingles\\inglejo01</td>\n",
       "      <td>SF</td>\n",
       "      <td>33</td>\n",
       "      <td>UTA</td>\n",
       "      <td>50</td>\n",
       "      <td>1341</td>\n",
       "      <td>17.0</td>\n",
       "      <td>0.714</td>\n",
       "      <td>0.710</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.6</td>\n",
       "      <td>5.6</td>\n",
       "      <td>0.199</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.4</td>\n",
       "      <td>2.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Ivica Zubac\\zubaciv01</td>\n",
       "      <td>C</td>\n",
       "      <td>23</td>\n",
       "      <td>LAC</td>\n",
       "      <td>57</td>\n",
       "      <td>1269</td>\n",
       "      <td>19.7</td>\n",
       "      <td>0.694</td>\n",
       "      <td>0.010</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.7</td>\n",
       "      <td>5.7</td>\n",
       "      <td>0.214</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.9</td>\n",
       "      <td>-0.2</td>\n",
       "      <td>0.7</td>\n",
       "      <td>0.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Jarrett Allen\\allenja01</td>\n",
       "      <td>C</td>\n",
       "      <td>22</td>\n",
       "      <td>TOT</td>\n",
       "      <td>46</td>\n",
       "      <td>1327</td>\n",
       "      <td>21.6</td>\n",
       "      <td>0.680</td>\n",
       "      <td>0.038</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.7</td>\n",
       "      <td>5.3</td>\n",
       "      <td>0.193</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.1</td>\n",
       "      <td>0.1</td>\n",
       "      <td>2.2</td>\n",
       "      <td>1.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Rudy Gobert\\goberru01</td>\n",
       "      <td>C</td>\n",
       "      <td>28</td>\n",
       "      <td>UTA</td>\n",
       "      <td>55</td>\n",
       "      <td>1705</td>\n",
       "      <td>23.7</td>\n",
       "      <td>0.675</td>\n",
       "      <td>0.007</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.8</td>\n",
       "      <td>4.0</td>\n",
       "      <td>8.8</td>\n",
       "      <td>0.248</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.1</td>\n",
       "      <td>2.5</td>\n",
       "      <td>4.6</td>\n",
       "      <td>2.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Richaun Holmes\\holmeri01</td>\n",
       "      <td>C</td>\n",
       "      <td>27</td>\n",
       "      <td>SAC</td>\n",
       "      <td>50</td>\n",
       "      <td>1499</td>\n",
       "      <td>20.3</td>\n",
       "      <td>0.674</td>\n",
       "      <td>0.022</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>0.165</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.7</td>\n",
       "      <td>-0.2</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 29 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Rk                    Player Pos  Age   Tm   G    MP   PER   TS%▼   3PAr  \\\n",
       "0   1      Joe Ingles\\inglejo01  SF   33  UTA  50  1341  17.0  0.714  0.710   \n",
       "1   2     Ivica Zubac\\zubaciv01   C   23  LAC  57  1269  19.7  0.694  0.010   \n",
       "2   3   Jarrett Allen\\allenja01   C   22  TOT  46  1327  21.6  0.680  0.038   \n",
       "3   4     Rudy Gobert\\goberru01   C   28  UTA  55  1705  23.7  0.675  0.007   \n",
       "4   5  Richaun Holmes\\holmeri01   C   27  SAC  50  1499  20.3  0.674  0.022   \n",
       "\n",
       "   ...  Unnamed: 19  OWS  DWS   WS  WS/48  Unnamed: 24  OBPM  DBPM  BPM  VORP  \n",
       "0  ...          NaN  4.0  1.6  5.6  0.199          NaN   3.3   1.0  4.4   2.2  \n",
       "1  ...          NaN  4.0  1.7  5.7  0.214          NaN   0.9  -0.2  0.7   0.9  \n",
       "2  ...          NaN  3.6  1.7  5.3  0.193          NaN   2.1   0.1  2.2   1.4  \n",
       "3  ...          NaN  4.8  4.0  8.8  0.248          NaN   2.1   2.5  4.6   2.9  \n",
       "4  ...          NaN  4.1  1.0  5.2  0.165          NaN   0.7  -0.2  0.5   1.0  \n",
       "\n",
       "[5 rows x 29 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "advstats = pd.read_csv(\"advancedstats.csv\")\n",
    "advstats.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['Rk', 'Player', 'Pos', 'Age', 'Tm', 'G', 'MP', 'PER', 'TS%▼', '3PAr',\n",
      "       'FTr', 'ORB%', 'DRB%', 'TRB%', 'AST%', 'STL%', 'BLK%', 'TOV%', 'USG%',\n",
      "       'Unnamed: 19', 'OWS', 'DWS', 'WS', 'WS/48', 'Unnamed: 24', 'OBPM',\n",
      "       'DBPM', 'BPM', 'VORP'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(advstats.keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "stats = {}\n",
    "for i in range(195):\n",
    "    playersm = advstats[\"Player\"][i]\n",
    "    player = playersm[:playersm.index(\"\\\\\")]\n",
    "    TS = advstats[\"TS%▼\"][i] * 100\n",
    "    OBPM = advstats[\"OBPM\"][i]\n",
    "    stats[player] = [TS]\n",
    "    stats[player].append(OBPM)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['Rk', 'Player', 'Pos', 'Age', 'Tm', 'G', 'GS', 'MP', 'FG', 'FGA', 'FG%',\n",
      "       '3P', '3PA', '3P%', '2P', '2PA', '2P%', 'FT', 'FTA', 'FT%', 'ORB',\n",
      "       'DRB', 'TRB', 'AST', 'STL', 'BLK', 'TOV', 'PF', 'PTS▼'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(per36.keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(236):\n",
    "    playersm = per36[\"Player\"][i]\n",
    "    player = playersm[:playersm.index(\"\\\\\")]\n",
    "    PTS = per36[\"PTS▼\"][i]\n",
    "    if player in stats:\n",
    "        stats[player].append(PTS)\n",
    "for i in stats:\n",
    "    if len(stats[i]) == 4:\n",
    "        if stats[i][3] == stats[i][2]:\n",
    "            stats[i].remove(stats[i][3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "x = []\n",
    "y = []\n",
    "for i in stats:\n",
    "    if len(stats[i]) == 3:\n",
    "        y.append(stats[i][0])\n",
    "        test = np.array([stats[i][1], stats[i][2]])\n",
    "        x.append(test)\n",
    "X = np.array(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'True Shooting %')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.linear_model import Ridge\n",
    "import matplotlib.pyplot as plt \n",
    "import mglearn\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "for i in stats:\n",
    "    if len(stats[i]) >= 2:\n",
    "        if i == \"Stephen Curry\":\n",
    "            ax.scatter(stats[i][0], stats[i][1], c = 'tab:red', alpha = 1, edgecolors = 'none')\n",
    "        elif i == \"Joel Embiid\" or i == \"Nikola Jokić\" or i == \"Luka Dončić\" or i == \"Giannis Antetokounmpo\" or i == \"Damian Lillard\" or i == \"Kawhi Leonard\" or i == \"James Harden\" or i == \"LeBron James\" or i == \"Rudy Gobert\":\n",
    "            ax.scatter(stats[i][0], stats[i][1], c = 'tab:green', alpha = 0.7, edgecolors = 'none')\n",
    "        else:\n",
    "            ax.scatter(stats[i][0], stats[i][1], c = 'tab:blue', alpha = 0.2, edgecolors = 'none')\n",
    "plt.xlabel(\"True Shooting %\")\n",
    "plt.ylabel(\"Offensive Box Plus Minus\")\n",
    "fig, ax = plt.subplots()\n",
    "for i in stats:\n",
    "    if i == \"Stephen Curry\":\n",
    "        ax.scatter(stats[i][-1], stats[i][0], c = 'tab:red', alpha = 1, edgecolors = 'none')\n",
    "    elif i == \"Joel Embiid\" or i == \"Nikola Jokić\" or i == \"Luka Dončić\" or i == \"Giannis Antetokounmpo\" or i == \"Damian Lillard\" or i == \"Kawhi Leonard\" or i == \"James Harden\" or i == \"LeBron James\" or i == \"Rudy Gobert\":\n",
    "        ax.scatter(stats[i][-1], stats[i][0], c = 'tab:green', alpha = 0.8, edgecolors = 'none')\n",
    "    else:\n",
    "        ax.scatter(stats[i][-1], stats[i][0], c = 'tab:blue', alpha = 0.05, edgecolors = 'none')\n",
    "plt.xlabel(\"Points per 36 minutes played\")\n",
    "plt.ylabel(\"True Shooting %\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
